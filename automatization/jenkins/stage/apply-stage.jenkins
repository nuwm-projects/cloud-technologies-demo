#!groovy
properties([
        disableConcurrentBuilds(),
        pipelineTriggers([
                GenericTrigger(
                        genericVariables: [
                                [key: 'ref', value: '$.ref'],
                                [key: 'ref_type', value: '$.ref_type'],
                                [key: 'commit_message', value: '$.head_commit.message'],
                        ],
                        printContributedVariables: true,
                        printPostContent: true,
                        token: '54hcQxRJSv3yJAry4CztBKKDP2fAjzViKQ7SvLvG',
                        regexpFilterText: '$commit_message',
                        regexpFilterExpression: "^((?!.*BOTDEPLOY).*)$",
                )
        ])
])

pipeline {
    agent {
        label 'cloud-tech'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("Clone code from GitHub") {
            if (commit_message == 'BOTDEPLOY') {
                echo 'Deploying stopped by commit message'
                return;
            }
            steps {
                dir("/var/builds/cloud-technologies-demo") {
                    script {
                        sh 'git checkout -- .'
                        sh 'git clean -fd'
                        sh 'git fetch && git checkout master && git pull'
                    }
                }
            }
        }
        stage("Run tests") {
            parallel {
                stage("Run frontend tests") {
                    steps {
                        dir("/var/builds/cloud-technologies-demo/app/frontend") {
                            script {
                                sh 'npm install'
                                sh 'npm run test'
                                archiveArtifacts allowEmptyArchive: true, artifacts: 'test-report.html'
                            }
                        }
                    }
                }
                stage("Run backend tests") {
                    steps {
                        dir("/var/builds/cloud-technologies-demo/app/backend/src") {
                            script {
                                sh 'cp .env.example .env'
                                sh 'composer install'
                                sh './artisan test --testdox-html ./tests/_results/result-backend.html'
                                archiveArtifacts allowEmptyArchive: true, artifacts: 'tests/_results/result-backend.html'
                            }
                        }
                    }
                }
            }
        }
        stage("Build applications") {
            parallel {
                stage("Build frontend application") {
                    steps {
                        dir("/var/builds/cloud-technologies-demo/app/frontend") {
                            script {
                                sh 'make build url=https://stage-counter.my-services.com.ua'
                                sh 'tar -czvf ./dist.tar.gz ./dist/'
                                archiveArtifacts allowEmptyArchive: true, artifacts: 'dist.tar.gz'
                            }
                        }
                    }
                }
                stage("Build backend application") {
                    steps {
                        dir("/var/builds/cloud-technologies-demo/app/backend") {
                            script {
                                sh 'make build'
                            }
                        }
                    }
                }
            }
        }
        stage("Deploy applications") {
            steps {
                dir("/var/builds/cloud-technologies-demo/automatization/infrastructure/terraform") {
                    script {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                        sh 'git add terraform.tfstate* && git commit -m "BOTDEPLOY" && git push'
                    }
                }
                dir("/var/builds/cloud-technologies-demo/app/frontend") {
                    script {
                        sh 'aws s3 cp ./dist s3://stage-counter.my-services.com.ua/ --recursive'
                    }
                }
            }
        }
    }
    post {
        always {
            discordSend description: "Application for testing deployment \n" + "Result: " + currentBuild.currentResult,
                    footer: "",
                    link: env.BUILD_URL,
                    result: currentBuild.currentResult,
                    title: JOB_NAME,
                    webhookURL: "https://discord.com/api/webhooks/867719036569124884/ToAPbjqpdmy-OYSCd2DCXHxslZ7nmd5WhF62F51gvtAYgqPo3HwHofq3sns7EPQEORvd"
        }
    }
}
